******************************************Custom Scroll Code******************************************
$("#ecp_name").keydown(function(e) {
    if($('#ecp-list li').is(':visible')) {  
        var top         = $('#ecp-list').scrollTop(); 
        var ulheight    = $('#ecp-list')[0].scrollHeight; 
        var liheight    = $('#ecp-list').find('.selected').prev().outerHeight();
    } 
    switch (e.which) {
        case 40:
            e.preventDefault(); // prevent moving the cursor
            var next_cont_value = $('#ecp-list li:not(:last-child).selected').removeClass('selected').next().addClass('selected');
            $val = next_cont_value.text(); 
            $val1 = next_cont_value.attr('value'); 
            if($val){
                 $("#ecp_name").val($val);
            }
            if($val1){
                 $("#ecp_id").val($val1);
            }
           //scroll code
            var nextHeight  = top + liheight; 
            var maxHeight   = ulheight - liheight;
            if((nextHeight <= maxHeight)){
                $('#ecp-list').scrollTop(top + liheight);
            } else {
                $('#ecp-list').scrollTop(0); //scrolling
            }
        break;
        case 38:
            e.preventDefault(); // prevent moving the cursor
            var prv_cont_value = $('#ecp-list li:not(:eq(1)).selected').removeClass('selected').prev().addClass('selected');

            $val = prv_cont_value.text(); 
            $val1 = prv_cont_value.attr('value'); 

            if($val){
                 $("#ecp_name").val($val);
            }
            if($val1){
                 $("#ecp_id").val($val1);
            }
            //scroll code
            if(top != 0) {
                $('#ecp-list').scrollTop(top - liheight); //scrolling
            }
        break;
    }
});

$("#ecp_name").keyup(function(e) {    
    if ($(this).val().length >= 3 && e.which != 40 && e.which != 38) {
        $("#ecp_suggesstions").html('');
        
        fetch_ecp_suggestions();     
    }
});
******************************************Custom Scroll Code******************************************

***************************************** Date Month Year Scroll Code *************************************
 case "getTotalBottlesSoldBargraph":

        $one_month_interval = new DateInterval("P1M"); // 1 month
        $occurrence = 11;
        $previous_jan_dt = date('Y-m-d 00:00:00',strtotime("January 1st"));
        $previous_year_start = DateTime::createFromFormat("Y-m-d 00:00:00",$previous_jan_dt);
        $previous_year = new DatePeriod($previous_year_start,$one_month_interval,$occurrence);

        foreach($previous_year as $pre_dt){
            $pre_start_dt   = $pre_dt->format("Y-m-d 00:00:00");
            $pre_end_dt     = $pre_dt->format("Y-m-t 23:59:59");
            $strMonth           = date("M", strtotime($pre_start_dt));
            if ($pre_start_dt < date('Y-m-d 00:00:00')) {
                $bottles_sold = $serviceObj["dashboardObj"]->getRevenueBottlesTotal($pre_start_dt,$pre_end_dt);
                $bottles_sold_partial = $serviceObj["dashboardObj"]->getRevenueBottlesTotalPartial($pre_start_dt,$pre_end_dt);
                $btlSoldArr[] = $bottles_sold['total_bottles']-$bottles_sold_partial['total_bottles_partial'];
                $monthArr[] = $strMonth;
            }else{
                continue;
            }
        }
        echo json_encode(array(
                            'bottles_sold' => $btlSoldArr,
                            'month' => $monthArr
                        ));
    break;
************************************** Date Month Year Scroll Code **************************************
************************************** HighChart **************************************
function getbottlesSoldBarGraph() {
	  	$.ajax({
	    	type: "POST",
			url: site_url + "/ajax/dashboard-ajax.php",
			data: "type=getTotalBottlesSoldBargraph",
			dataType: "json",
			beforeSend : function() {
		     $('#bottleSoldBarGraph').loader({
		        'loader': 'on',
		        'img_url': site_url + '/assets/images/circularloader.gif'
		      });
		    },
	    	success: function(data) {
			  $('#bottleSoldBarGraph').loader({
		        'loader': 'off'
		      });
	      		bottlesSoldBarGraph(data);
	    	}
	  	});
	}
function bottlesSoldBarGraph(data) {
		var actPatient 	= data['bottles_sold'];
		var months 		= data['month'];
		var chart = new Highcharts.Chart({
		chart: {
		  renderTo: 'bottleSoldBarGraph',
		        type: 'column',
		      },
		      title: {
		        text: '',
		      },
		      credits: {
		        enabled: false
		      },
		      yAxis: {
		        title: {
		          text: '',
		          useHTML: true,
		          style: {
		            "-webkit-transform": "rotate(90deg)",
		            "-moz-transform": "rotate(90deg)",
		            "-o-transform": "rotate(90deg)",
		            "margin-left": "-22px",
		          }
		        }
		      },
		      tooltip: {
		        useHTML: false,
		        formatter: function() {
		          var text = this.key;
		          var new_text = text.replace("<br/>", " ");
		          return '<div class="tooltip"> Month : ' + new_text + '<br>Bottles Sold: ' + this.y +	
		          '</div>';
		        }
		      },
		      xAxis: {
		        text: 'Months',
		        categories: months

		      },
		      series: [{
		        showInLegend: false,
		        data: actPatient,
		        color: "#50C1E3",
		        lineWidth: 4,
		        marker: {
		          symbol: 'circle',
		          lineWidth: 6,
		            lineColor: '#50C1E3', //Highcharts.getOptions().colors[0],
		            fillColor: 'blue'
		          }
		        }]
		});
    }
************************************** HighChart **************************************
************************************** Last12Month **************************************
   Public function Last12Month() {
        $patients = $monthArr =  $resultArray = array();
        $j=11;
        for ($i = 0; $i <= 11; $i++) {
            $date       = date("Y-m-d", strtotime(date('Y-m-01')." -$j months"));
            $year       = date("Y", strtotime($date));
            $month      = date("m", strtotime($date));
            $strMonth   = date("M", strtotime($date));
            $get_pat    = $this->getPatientMonthYear($year,$month);
            $patients[] = (int)$get_pat;
            $monthArr[] = $strMonth . '<br/>' . $year;
            $j--;
        }
        $resultArray['totPatient'] = array_sum($patients);
        $resultArray['patient']    = $patients;
        $resultArray['month']      = $monthArr;
        return $resultArray;
    }
************************************** Last12Month **************************************
************************************** Missing Date **************************************
 case 'ecp_sales_bind':
    $data       = '';
    $response   = [];

    $data      .="
    <h3>ECP Sales Mapping - Allocated Dates & Missing Dates</h3>
    <table id='practice2' border='1' class='ecp sales bind table table-bordered table-striped table-hover'><thead>
    <tr>
    <th>#</th>
    <th>ECP Name</th>
    <th>Allocated Dates</th>
    <th>Missing Dates</th>
    </tr>
    </thead>
    <tbody>";
    $k = 0;
    $pro_list  = $data_aintenance_db->FetchProviderList();
    $index_arr = [];
    foreach ($pro_list as $key => $value) {
        $k++;
        $i = $m = 0;
        $ecp_id = $value['id'];
        $missing_dates = $allocated_dates = '';
        $data      .="<tr>
        <td>$k</td>
        <td><a href='" . SITE_URL . DS . "user/ecp_edit.php?ecp_id=$ecp_id#doc_sales_section' target='_blank'>" . $value['provider_physician_name'] . "</a></td>
        ";

        $ecp_first_ord_date = $data_aintenance_db->getEcpFirstOrdDate($value['idprovider']);
        $sales_mapping_rows = $data_aintenance_db->fetchProvideeSalesuserMappingRows($value['idprovider']);
        if(!empty($sales_mapping_rows)){
            foreach ($sales_mapping_rows as $sales_mapp_row) {
                $i++;
                $ord_fdate   = strtotime(date("Y-m-d", strtotime($ecp_first_ord_date[0]['OrderDate'])));
                $sales_fdate = strtotime(date("Y-m-d", strtotime($sales_mapp_row['start_date'])));
                if($i == 1 && $ord_fdate <= $sales_fdate){
                    $m++;
                    $missing_dates .= "$m. From ".date("m/d/y", $ord_fdate)." To ".date("m/d/y", strtotime('-1 day', $sales_fdate))."<br>";
                } else if($i > 1){
                    if(end($index_arr['end_date']) <= $sales_fdate){
                       $m++;
                        $missing_dates .= "$m. From ".date("m/d/y", strtotime('+1 day', end($index_arr['end_date'])))." To ".date("m/d/y", strtotime('-1 day', $sales_fdate))."<br>";
                    }
                }
                $allocated_dates .= "$i. From ".date("m/d/y", strtotime($sales_mapp_row['start_date']))." To ".date("m/d/y", strtotime($sales_mapp_row['end_date']))." - ".$sales_mapp_row['name']."<br>";
                $index_arr['start_date'][] = strtotime(date("Y-m-d", strtotime($sales_mapp_row['start_date'])));
                $index_arr['end_date'][]  =  strtotime(date("Y-m-d", strtotime($sales_mapp_row['end_date'])));
            }
        }
        if(!empty($sales_mapping_rows)){
            if(end($index_arr['end_date']) <= strtotime(date('Y-m-d'))){
               $m++;
                $missing_dates .= "$m. From ".date("m/d/y", strtotime('+1 day', end($index_arr['end_date'])))." To ".date("m/d/y")."<br>";
            }
        }
        if(!empty($ecp_first_ord_date) && empty($sales_mapping_rows)){
            $missing_dates = '1. From '.date("m/d/y", strtotime($ecp_first_ord_date[0]['OrderDate'])).' To '.date("m/d/y");
        }
        $data      .="
        <td>$allocated_dates</td>
        <td>$missing_dates</td>
        </tr>";
    }
    $data.="</tbody></table>";
    $response['table_data'] = $data;
    echo json_encode($response);
    break;
************************************** Missing Date **************************************